exit
(start)
exit
(start)
exit
(require '[clojure.java.jdbc] :as sql])
(require '[clojure.java.jdbc :as sql])
(require '[sigil.db.core :as db])
(sql/insert! db/db :issues
{:user_id 2 :title "Inserted from REPL!"})
(def a-query '(sql/insert! db/db :issues {:user_id 1 :title "Inserted from transaction"}))
a-query
(def a-query '(sql/insert! tconn :issues {:user_id 1 :title "Inserted from transaction"}))
a-query
(sql/with-db-transaction [tconn db/db] a-query)
(sql/with-db-transaction [tconn db/db] (sql/insert! tconn :issues {:user_id 1 :title "Inserted from transaction"}))
(def a-query '(sql/insert! tconn :issues {:user_id 2 :title "Nah, this is a second transaction."}))
(sql/with-db-transaction [tconn db/db] (eval a-query))
(def a-query '(sql/insert! tconn :issues {:user_id 2 "Nah, this is a second transaction."}))
(def a-query '(sql/insert! tconn :issues {:user_id 2 :title "Nah, this is a second transaction."}))
a-query
(sql/with-db-transaction [tconn db/db] a-query)
(def a-query '(sql/insert! db/db :issues {:user_id 2 :title "Nah, this is a second transaction."}))
a-query
(sql/with-db-transaction [tconn db/db] (eval a-query))
exit
(use sigil.db.tentative-funcs
)
(use 'sigil.db.tentative-funcs)
exit
(use 'sigil.db.tentative-funcs)
exit
(use 'sigil.db.tentative-funcs)
exit
(use 'sigil.db.tentative-funcs)
exit
(use 'sigil.db.tentative-funcs)
(insert-issue test-issue-one)
(reload)
(insert-issue test-issue-one)
exit
(use 'sigil.db.tentative-funcs)
(insert-issue test-issue-one)
(def insert '(sql/insert! db/db :issues))
insert
test-issue-one
(conj test-issue-one insert)
(conj insert test-issue-one)
(conj test-issue-one (list insert))
(conj insert (list test-issue-one))
(concat insert (list test-issue-one))
exit
(use 'sigil.db.tentative-funcs)
(insert-issue test-issue-one)
(def changes (list (insert-issue test-issue-one) (insert-issue test-issue-two)))
changes
(map (conj 'eval) changes)
(map (prepend 'eval) changes)
(map (list 'eval) changes)
(map list changes)
(map #('eval %) changes)
(map #(list 'eval %) changes)
exit
(use 'sigil.db.tentative-funcs)
(realize-transaction (insert-issue test-issue-one) (insert-issue test-issue-two))
exit
(use 'sigil.db.tentative-funcs)
exit
(use 'sigil.db.tentative-funcs)
(db-trans (insert-issue test-issue-one) (insert-issue test-issue-two))
(:require '[clojure.java.jdbc :as sql])
(db-trans (insert-issue test-issue-one) (insert-issue test-issue-two))
exit
(use 'sigil.db.tentative-funcs)
(db-trans (insert-issue test-issue-one) (insert-issue test-issue-two))
exit
(db-trans (insert-issue test-issue-one) (insert-issue test-issue-two))
(use 'sigil.db.tentative-funcs)
(db-trans (insert-issue test-issue-one) (insert-issue test-issue-two))
exit
(use 'sigil.db.tentative-funcs)
exit
(use 'sigil.db.tentative-funcs)
(db-trans (insert-issue test-issue-one) (insert-issue test-issue-two))
exit
(use 'sigil.db.tentative-funcs)
(realize-transaction (insert-issue test-issue-one) (insert-issue test-issue-two))
(eval (realize-transaction (insert-issue test-issue-one) (insert-issue test-issue-two)))
(use 'sigil.db.tentative-funcs)
exit
(eval (realize-transaction (insert-issue test-issue-one) (insert-issue test-issue-two)))
(use 'sigil.db.tentative-funcs)
(eval (realize-transaction (insert-issue test-issue-one) (insert-issue test-issue-two)))
(eval 'sigil.db.core/db)
exit
(use 'sigil.db.tentative-funcs)
exit
(use 'sigil.db.tentative-funcs)
~@with-db-transaction
(use 'clojure.java.jdbc)
~@with-db-transaction
~with-db-transaction
@with-db-transaction
'with-db-transaction
~@with-db-transaction
#with-db-transaction
)
(insert-issue test-issue-one)
exit
(start)
exit
(build-and-seed)
exit
(start)
exit
(start)
(use 'sigil.views.user-register :reload)
(rand-nth (sigil.db.orgs/default_org_icon_100))
(rand-nth sigil.db.orgs/default_org_icon_100)
(use 'sigil.db.users :reload)
(> (count nil)0)
(use 'sigil.views.home :reload)
exit
